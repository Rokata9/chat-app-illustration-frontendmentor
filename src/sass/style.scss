@use "resets";
@use "components";

:root {
  --clr-primary-300: hsl(276, 100%, 81%);
  --clr-primary-400: hsl(276, 55%, 52%);

  --clr-neutral-100: 0 0% 100%;
  --clr-neutral-400: hsl(270, 7%, 64%);
  --clr-neutral-500: hsl(271, 15%, 43%);
  --clr-neutral-600: hsl(271, 36%, 24%);

  --clr-secondary-300: hsl(270, 20%, 96%);
  --clr-secondary-400: hsl(206, 6%, 79%);
  --clr-secondary-500: hsl(271, 36%, 24%);
  --clr-secondary-600: hsl(289, 100%, 72%);

  --fs-200: 0.75rem;
  --fs-300: 0.813rem;
  --fs-400: 1rem;
  --fs-500: 1.5rem;
  --fs-700: 2.125rem;
  --fs-900: 3.375rem;

  --fw-400: 400;
  --fw-500: 500;
  --fw-700: 700;
}

$br-chat-message-3-corners: 1.5em;
$br-chat-message-bottom-corner: 0.5em;
$tablet-width: 48em;

body {
  font-family: "Rubik", sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  margin: 0;
  background-color: rgb(249, 249, 249);
  overflow-x: hidden;
}

.flow > * + * {
  margin-top: 1rem !important;
}

.notransition {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  -o-transition: none !important;
  transition: none !important;
}

@mixin gradient($deg: 45deg) {
  background: linear-gradient($deg, hsl(293, 100%, 63%), hsl(264, 100%, 61%));
}

.container {
  --phone-aspect-ratio: calc(9 / 16);
  --container-gap: clamp(2rem, -6.6667rem + 18.0556vw, 15rem); // from 768px to 1920px
  --container-block-padding: 4rem;
  --container-inline-padding: 1rem;

  // in rems as we want to be able to zoom in that particular part
  --phone-width: clamp(18rem, 15.9545rem + 10.2273vw, 22.5rem); // from 320px to 1024px
  --phone-height: calc(1 / var(--phone-aspect-ratio) * var(--phone-width));

  /* fraction of phone width could also be clamped instead of fixed rems, specifies
     what part of the decoration flows behind phone horizontally;
     want to decrease as viewport increases, so using negative values for clamp */
  --gradient-right-offset: clamp(-20rem, -30rem + 20.8333vw, -5rem); // from 768px to 1920px

  // handles also vertical mode of monitors, thus included height in name
  --decoration-height-desktop: calc((100% - var(--phone-height)) * 0.5 - 2rem);

  /* distance between left edge of phone and left edge of viewport + some offset to move a bit decoration,
     should be equal for both decorations */
  --decoration-width-desktop: calc(-1 * (50vw - var(--container-gap) * 0.5 - 100% + 2rem));

  --decoration-half-width-mobile: calc(-1 * (50% + (100vw - var(--phone-width)) * 0.5));

  /* distance between end of decoration and end of containing flex item for phone decoration
     and between start of containing flex item and start of decoration for booking decoration */
  --decoration-horizontal-offset-desktop: calc(var(--phone-width) - var(--gradient-right-offset) * -1);
  
  // how much the phone is ahead of decoration vertically on mobile
  --phone-vertical-offset-mobile: 2rem;

  padding: var(--container-block-padding) var(--container-inline-padding) 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  flex-grow: 1;
  gap: var(--container-gap);

  @media (min-width: $tablet-width) {
    flex-direction: row;
    padding-block-end: var(--container-block-padding);
  }
}

.booking {
  max-width: 40ch;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  --booking-decoration-height-mobile: calc(var(--phone-height) + var(--container-block-padding) - var(--phone-vertical-offset-mobile));
  --booking-decoration-top-offset-mobile: 7.5rem;

  &::before {
    content: "";
    position: absolute;
    right: var(--decoration-width-desktop);
    bottom: calc(var(--container-block-padding) * -1); // has to cover container's padding
    top: var(--decoration-height-desktop); // 2rem;
    left: var(--decoration-horizontal-offset-desktop);
    background: var(--clr-secondary-300);
    border-radius: 100vw 100vw 0 0;
    z-index: -1;
  }

  h1 {
    color: var(--clr-neutral-600);
  }

  p {
    color: var(--clr-neutral-400);
    line-height: 1.8;
  }
  
  @media (max-width: $tablet-width) {
    text-align: center;

    // exclude decoration's top offset from content's height (starting just after phone and the gap)
    height: calc(var(--booking-decoration-height-mobile) - var(--booking-decoration-top-offset-mobile));
    align-items: center;

    &::before {
      left: 50%;
      right: var(--decoration-half-width-mobile);
      top: calc(-1 * var(--booking-decoration-top-offset-mobile));
      height: var(--booking-decoration-height-mobile);
      bottom: unset; // using bottom: var(--container-block-padding) * -1 would make this decoration higher than the phone's
    }
  }
}

.phone-wrapper {
  // we want to keep .phone overflow hidden for the scroll so this should be the containing block for the gradient
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;

  &::before {
    content: "";
    position: absolute;

    /* need to calculate the distance between left edge of screen and left edge of phone,
       that would be the negative left for the decoration; should be with - as it's relative to the phone (needs to move right)
       +2rem - so it's not exactly glued to the left edge and hide partially the border radius (pill rounding) */
    left: var(--decoration-width-desktop);
    top: calc(var(--container-block-padding) * -1);

    // --gradient-right-offset is negative so clamp can work (should increase)
    right: var(--decoration-horizontal-offset-desktop);
    bottom: var(--decoration-height-desktop);
    z-index: -1;
    border-radius: 0 0 100vw 100vw;
    @include gradient(180deg);

    @media (max-width: $tablet-width) {
      left: var(--decoration-half-width-mobile); //calc(-1 * (100vw - 100%) * 0.5);
      right: 50%; //calc(-1 * (100vw - 100%) * 0.5);
      bottom: var(--phone-vertical-offset-mobile);
    }
  }
}

.phone {
  width: var(--phone-width);
  aspect-ratio: var(--phone-aspect-ratio);
  padding: 1.25em;
  box-shadow: 0 16px 20px 10px rgb(204 198 198 / 50%);
  // According to https://www.30secondsofcode.org/css/s/nested-border-radius/
  // 1.25em (distance to inner border radius) + 1.5rem (inner border radius of header for top-left and top-right or of footer for bottom-left and bottom-right)
  border-radius: 2.75rem;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  background-color: #fff;

  p {
    margin: 0;
  }

  .phone-header {
    display: grid;
    position: relative;
    grid-template-areas:
      "back avatar username actions"
      "back avatar status actions";
    grid-template-columns: min-content min-content 1fr min-content;
    gap: 0.25rem;
    align-items: center;
    padding: 2em 1em 1em;
    border-radius: 1.5rem 1.5rem 0.5rem 0.5rem;
    @include gradient(45deg);

    &::after {
      position: absolute;
      content: "";
      width: 65%;
      height: 2.75rem;
      top: 0;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: hsl(var(--clr-neutral-100));
      border-radius: 100vw;
    }

    .actions {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;

      div {
        width: 0.25rem;
        height: 0.25rem;
        background-color: hsl(var(--clr-neutral-100));
        border-radius: 50%;
      }
    }

    .back {
      grid-area: back;
      color: hsl(var(--clr-neutral-100));
      font-weight: var(--fw-700);
      margin-right: 0.5rem;
    }

    .avatar {
      grid-area: avatar;
      width: 2.5rem;
      aspect-ratio: 1;

      img {
        border-radius: 50%;
      }
    }

    .user-name {
      grid-area: username;
      font-weight: var(--fw-500);
      color: hsl(var(--clr-neutral-100));
    }

    .user-status {
      grid-area: status;
      font-size: var(--fs-300);
      color: hsl(var(--clr-neutral-100) / 0.5);
    }

    .actions {
      grid-area: actions;
    }
  }

  .item-scroller {
    overflow-y: scroll;
    flex-grow: 1;
    // cover white background left by header rounder corners
    box-shadow: 0 -0.5rem 0 0 var(--clr-secondary-300);
  }

  .chat-container {
    overflow: hidden;
    position: relative;
  }

  .phone-chat {
    background-color: var(--clr-secondary-300);
    margin-top: -0.5rem;
    padding: 1.5em 1em 1em;

    transition: transform 200ms ease-in-out;
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    //top: 0;

    .message-wrapper {
      display: flex;
      padding-top: 1rem;

      .image-grid {
        display: grid;
        // could be without a clamp, but with a fixed value to keep consistent layout when increasing viewport
        grid-template-columns: repeat(
          auto-fit,
          minmax(clamp(3rem, 2.4074rem + 2.963vw, 4rem), 1fr)
        ); // 320px to 860px
        width: 90%;
        justify-content: end;
        gap: 1rem;
        direction: rtl; // so that if a single image is on a new line it appears to the right

        img {
          border-radius: 1.5rem;
          aspect-ratio: 1;
        }
      }

      &.start .chat-message {
        border-bottom-left-radius: $br-chat-message-bottom-corner;
        border-bottom-right-radius: $br-chat-message-3-corners;
      }

      &.end {
        justify-content: flex-end;
        .chat-message {
          border-bottom-left-radius: $br-chat-message-3-corners;
          border-bottom-right-radius: $br-chat-message-bottom-corner;
        }
      }

      .chat-message {
        padding: 0.75em;
        border-top-left-radius: $br-chat-message-3-corners;
        border-top-right-radius: $br-chat-message-3-corners;
        background: var(--bg, transparent);
        color: var(--fg, var(--clr-neutral-600));
        max-width: 85%;

        &.bg-light {
          --bg: hsl(var(--clr-neutral-100));
          box-shadow: 0px 10px 20px 0px rgb(204 198 198 / 50%);
        }

        &.bg-mid {
          --bg: rgb(234, 224, 244);
          --fg: var(--clr-primary-400);
        }

        &.bg-gradient {
          @include gradient(90deg);
          --fg: hsl(var(--clr-neutral-100));
          color: hsl(var(--clr-neutral-100) / 0.75);
          display: flex;
          align-items: center;
          flex-grow: 1;
          padding: 1em 1em 1em 0.75em;

          .radio-wrapper {
            flex-grow: 1;
          }

          .price {
            color: hsl(var(--clr-neutral-100));
            font-weight: var(--fw-700);
            font-size: var(--fs-500);
          }
        }
      }
    }
  }

  footer {
    background-color: var(--clr-secondary-300);
    padding: 1em;
    border-radius: 0 0 1.5rem 1.5rem;

    .input-wrapper {
      position: relative;

      input {
        background-color: hsl(var(--clr-neutral-100));
        border: none;
        border-radius: 100vw;
        width: 100%;
        padding: 0.75em;
        position: relative;

        &:focus {
          outline: none;
        }

        &::placeholder {
          opacity: 1;
          color: var(--clr-neutral-400);
        }
      }

      .send-btn {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 2rem;
        height: 2rem;
        border: none;
        background-color: var(--clr-secondary-500);
        border-radius: 50%;
        // TODO: replace with SVG icon
        color: hsl(var(--clr-neutral-100));
      }
    }
  }
}
